---
import Layout from "@/layouts/layout.astro";
import type { PaginateFunction } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import Pagination from "@/components/pagination.astro";
import { Image } from "astro:assets";
import NextPrevNav from "@/components/about-pages/next-prev-nav.astro";
import { nav } from "@/components/community-pages/nav-config.ts";
import FormattedDate from "@/components/formatted-date.astro";
import { proseClasses } from "@/lib/prose-classes";
import SearchDialog from "@/components/community-pages/search-dialog";
import SortDropDown from "@/components/community-pages/sort-dropdown";
import TagsSortDropDown from "@/components/community-pages/tags-sort-dropdown";
import Tag from "@/components/ui/tag2.astro";
import SideNav from "@/components/community-pages/side-nav.astro";
import Card from "@/components/community-pages/card.astro";

type Project = CollectionEntry<"Community_Contributions_Page">;

// Define a function to generate static paths
export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  // Retrieve the collection of "AkashTools_Page" and sort it by publication date
  const projects = (await getCollection("Community_Contributions_Page")).sort(
    (a, b) => {
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);

      // Sort in descending order (latest date first)
      return dateB.getTime() - dateA.getTime();
    },
  );

  // Initialize an array to store unique tags
  const tags: string[] = [];

  // Loop through each project
  projects.forEach((project) => {
    // Loop through the tags in each blog post
    project.data.tags.forEach((tag: string) => {
      // Capitalize the first letter of the tag
      const lowerCasedTag = tag.toLowerCase();
      // Check if the tag is not already in the allTags array
      if (!tags.includes(lowerCasedTag)) {
        // Add the tag to the allTags array
        tags.push(lowerCasedTag);
      }
    });
  });

  // Generate paths for each tag
  return tags.flatMap((tag) => {
    const lowercasedTag = tag.toLowerCase();

    // filter posts related to specified tag
    const filteredPosts = projects.filter((post) =>
      post.data.tags.some((tag: string) => tag.toLowerCase() === lowercasedTag),
    );

    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 12,
      props: { currentTag: tag, tags: tags },
    });
  });
}

// All paginated data is passed on the "page" prop
const { page, tags } = Astro.props;
const astroUrl = Astro.url;

function findPrevAndNextPages(nav: any, pathname: any) {
  // Find the index of the current page in the nav array
  const currentIndex = nav.findIndex((item: any) => item.link === pathname);

  // Calculate the index of the previous and next pages
  const prevIndex = currentIndex - 1;
  const nextIndex = currentIndex + 1;

  // Determine the previous and next pages
  const prevPage = prevIndex >= 0 ? nav[prevIndex] : null;
  const nextPage = nextIndex < nav.length ? nav[nextIndex] : null;

  return { prevPage, nextPage };
}

const pathname = new URL(Astro.request.url).pathname;

const communityPage = await Astro.glob(
  "../../../../../content/Community_Page/_community-contributions/*.mdx",
);

const PageContent = communityPage[0].Content;
const pageFrontMatter = communityPage[0].frontmatter;

console.log(pageFrontMatter);
---

<Layout title="Community Contributions">
  <div class="container mt-10 md:mt-[60px] lg:mt-20">
    <div class="grid grid-cols-12 gap-x-5">
      <SideNav nav={nav} />
      <div
        class={`col-span-12 mx-auto w-full md:pl-10   md:px-5 md:col-span-8 lg:col-span-9 `}
      >
        <div class="flex items-center justify-between gap-x-3 md:hidden">
          <p class="text-xs leading-[18px] text-primary"></p>
        </div>

        <div>
          <div class="mt-10 md:mt-0">
            <h1
              id="overview"
              class="text-2xl font-bold leading-[40px] md:text-2lg md:leading-[48px] lg:text-3lg"
            >
              {pageFrontMatter.title}
            </h1>
          </div>

          <div class="md:-mt-10">
            <article class={proseClasses}>
              <PageContent />
            </article>
          </div>
          <div class="mt-[72px] flex items-center justify-between">
            <h3 class="text-xl font-bold md:text-2lg lg:text-3lg">
              Community Contributions
            </h3>
          </div>
          <div
            class="not-prose mt-6 flex flex-col justify-between gap-x-6 gap-y-4 md:mt-8 md:gap-y-5 lg:flex-row lg:border-b lg:pb-[20px]"
          >
            <div
              class="flex items-center gap-x-4 border-b pb-4 md:pb-5 lg:border-0 lg:pb-0"
            >
              <Tag href={`/community/community-contributions/`}>All</Tag>

              {
                tags.map((tag: string) => (
                  <Tag
                    active={
                      astroUrl.pathname
                        .split("/")[3]
                        .split("%20")
                        .join(" ")
                        .toLowerCase() === tag.toLowerCase()
                    }
                    href={`/community/community-contributions/${tag.toLowerCase()}/latest/1`}
                  >
                    {tag.charAt(0).toUpperCase() + tag.slice(1)}
                  </Tag>
                ))
              }
            </div>

            <div class="flex items-center justify-end lg:justify-between">
              <SearchDialog client:load currentPath={astroUrl.pathname} />
            </div>
          </div>
        </div>

        <div>
          <div
            class="mt-[42px] grid grid-cols-1 gap-y-8 md:grid-cols-2 md:gap-x-6 lg:grid-cols-3"
          >
            {
              page.data.map((contribution: Project, i: number) => {
                return <Card contribution={contribution} />;
              })
            }
          </div>

          <Pagination page={page} />
        </div>
        <div class="md:hidden">
          <NextPrevNav nav={findPrevAndNextPages(nav, pathname)} />
        </div>
      </div>
    </div>
  </div>
</Layout>
