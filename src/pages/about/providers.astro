---
import {
  type CollectionEntry,
  getCollection,
  getEntryBySlug,
} from "astro:content";
import { nav } from "@/components/about-pages/nav-config.ts";
import TableOfContents from "@/components/development-pages/table-of-contents.tsx";

import generateToc from "@/lib/generateToc";
import NextPrevNav from "@/components/about-pages/next-prev-nav.astro";

import Layout from "@/layouts/layout.astro";
import MobileNav from "@/components/about-pages/mobile-nav";
import MobileTableOfContents from "@/components/about-pages/mobile-table-of-contents";
import { proseClasses } from "@/lib/prose-classes";
import TopMargin from "@/components/ui/top-margin.astro";
import SubItemsSidebar from "@/components/sub-items-sidebar.astro";
import Map from "@/components/providersandincentives/Map";
import {
  getProviderDetail,
  getDashboardData,
} from "@/components/about-pages/network-activity/useDashboardData";

// export async function getStaticPaths() {
//   const pages = await getCollection("About_Page");

//   return pages.map((page) => ({
//     params: { slug: page.slug },
//     props: page,
//   }));
// }

type Props = CollectionEntry<"Development_Page">;

const page = await getEntryBySlug("About_Page", "providers");

const { Content, headings } = await page.render();

const pageIndex = nav.findIndex(
  (item: any) => item.link === `/about/${page.slug}/`,
);

if (pageIndex !== -1) {
  const pageIndexSubItems = headings
    .filter((heading) => heading.depth <= 3)
    .map((heading) => ({
      label: heading.text,
      link: `#${heading.slug}`,
      enabled: true,
    }));

  // Update the nav array with the sub-items
  nav[pageIndex].subItems = pageIndexSubItems;
}

function findPrevAndNextPages(nav: any, pathname: any) {
  // Find the index of the current page in the nav array
  const currentIndex = nav.findIndex((item: any) => item.link === pathname);

  // Calculate the index of the previous and next pages
  const prevIndex = currentIndex - 1;
  const nextIndex = currentIndex + 1;

  // Determine the previous and next pages
  const prevPage = prevIndex >= 0 ? nav[prevIndex] : null;
  const nextPage = nextIndex < nav.length ? nav[nextIndex] : null;

  return { prevPage, nextPage };
}

const pathname = new URL(Astro.request.url).pathname;

const fileType = page.id.split("/")[1].split(".")[1];

let initialData = await getProviderDetail();
let initialData2 = await getDashboardData();
console.log(initialData2);
---

<Layout title="About">
  <TopMargin>
    <div class="grid grid-cols-12 gap-x-5">
      <SubItemsSidebar
        nav={nav}
        link={`https://github.com/HoomanHQ/Akash_Network/tree/main/src/content/About_Page/${
          page.slug ?? ""
        }/index.${fileType ?? ""}`}
      />

      <div
        class={`col-span-12 mx-auto w-full md:pl-10  md:col-span-8 lg:col-span-9 `}
      >
        <div class="flex items-center gap-x-3 md:hidden">
          <MobileNav
            pageName={Astro.url.pathname
              .split("/")[2]
              .split("-")
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(" ")}
            currentPath={pathname}
            client:load
            nav={nav}
          />

          <MobileTableOfContents
            client:load
            toc={generateToc(headings, "Overview")}
            labels={{
              onThisPage: "onThisPage",
            }}
          />
        </div>

        <div class="space-y-10">
          <div class="mt-10 md:mt-0">
            <h1
              id="overview"
              class="text-2xl font-bold leading-[32px] md:text-2lg md:leading-[40px] lg:text-3lg lg:leading-[48px]"
            >
              {page.data.title}
            </h1>
          </div>

          <Map
            client:load
            initialData={initialData}
            initialData2={initialData2}
          />
          <article class={proseClasses}>
            <Content />
          </article>
        </div>

        <div class="md:hidden">
          <NextPrevNav nav={findPrevAndNextPages(nav, pathname)} />
        </div>
      </div>
    </div>
  </TopMargin>
</Layout>
